plugins {
    id 'java'
    id 'war'
    id 'checkstyle'
    id 'eclipse-wtp'
    id 'org.springframework.boot' version '2.3.2.RELEASE'
}

apply plugin: 'checkstyle'
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'

description = 'SolarSSH Server'
archivesBaseName = 'solarssh'

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenLocal()
    maven { url "https://dev.solarnetwork.net/archive/repository/solarnetwork-stage/" }
}

ext {
	bouncyCastleVersion 	= '1.57'
	checkstyleVersion 		= '8.34'
    jacksonVersion 			= '2.11.1'
    javaxAnnotationVersion 	= '1.3.2'
    myBatisStarterVersion 	= '2.1.3'
    postgresJdbcVersion 	= '42.2.14'
    slf4jVersion 			= '1.7.30'
	springVersion 			= '5.2.8.RELEASE'
    sshdVersion				= '2.5.1'

    libraries = [
        // Test dependencies.
        hamcrest: 'org.hamcrest:hamcrest-library:1.3',
        junit: 'junit:junit:4.12',
        mockito: 'org.mockito:mockito-core:2.25.1'
    ]
}

configurations {
	all*.exclude group: 'commons-logging'
	all*.exclude group: 'net.sf.supercsv'
	all*.exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
	all*.exclude group: 'org.osgi'
	all*.exclude group: 'org.springframework', module: 'spring-messaging'
	all*.exclude group: 'org.springframework.security'
	all*.exclude group: 'javax.servlet', module: 'com.springsource.javax.servlet'
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// allow WAR to be run from command line OR deployed in Tomcat
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	// JSON
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}"
	
	// DB
	implementation "org.postgresql:postgresql:${postgresJdbcVersion}"

	// Logging
	implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
	implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
	implementation "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
	implementation "org.slf4j:slf4j-api:${slf4jVersion}"
	
	// SSH
    implementation "org.apache.sshd:sshd-mina:${sshdVersion}"
    implementation "org.bouncycastle:bcpg-jdk15on:${bouncyCastleVersion}"
    implementation "org.bouncycastle:bcpkix-jdk15on:${bouncyCastleVersion}"
    implementation 'net.i2p.crypto:eddsa:0.3.0'

	// SolarNetwork
	implementation 'net.solarnetwork.common:net.solarnetwork.common:1.74+'
	implementation 'net.solarnetwork.common:net.solarnetwork.common.web:1.17+'
	implementation 'net.solarnetwork.central:net.solarnetwork.central.common.security:1.16+'
	
    // HTTP
    implementation 'org.mitre.dsmiley.httpproxy:smiley-http-proxy-servlet:1.9'
    
    // Testing
	// Testing
    testImplementation 	libraries.junit,
		        		libraries.hamcrest,
		                libraries.mockito
	testImplementation 'ch.qos.logback:logback-classic:1.2.3'
}

jar {
    baseName = 'solarssh'
    version =  version
    manifest {
        attributes 'Implementation-Title': 'SolarSSH App',
                   'Implementation-Version': version
    }
}

war {
    baseName = 'solarssh'
    version =  version
    manifest {
        attributes 'Implementation-Title': 'SolarSSH App',
                   'Implementation-Version': version
    }
}

[
    compileJava,
    compileTestJava
].each() {
    it.options.compilerArgs += [
        "-Xlint:all",
        "-Xlint:-options",
        "-Xlint:-path",
        "-Xlint:-try"
    ]
    it.options.encoding = "UTF-8"
    if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
        it.options.compilerArgs += ["-Werror"]
    }
}

compileTestJava {
    options.compilerArgs += [
        "-Xlint:-serial"
    ]
}

jar.manifest {
    attributes('Implementation-Title': name,
    'Implementation-Version': version,
    'Built-By': System.getProperty('user.name'),
    'Built-JDK': System.getProperty('java.version'),
    'Source-Compatibility': sourceCompatibility,
    'Target-Compatibility': targetCompatibility)
}

javadoc.options {
    encoding = 'UTF-8'
    use = true
    links 'https://docs.oracle.com/javase/8/docs/api/'
    source = "8"
}

eclipse {
	project {
		natures 'net.sf.eclipsecs.core.CheckstyleNature'
		buildCommand 'net.sf.eclipsecs.core.CheckstyleBuilder'
	}
	wtp {
		facet {
			facet name: 'jst.java', version: 1.8
			facet name: 'jst.web', version: '3.1'
			facet name: 'jst.jaxrs', version: '2.0'
		}
	}
}

// Disable JavaDoc doclint on Java 8. It's annoying.
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// For jdk10 we must explicitly choose between html4 and html5, otherwise we get a warning
if (JavaVersion.current().isJava10Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addBooleanOption('html5', true)
        }
    }
}

checkstyle {
    toolVersion = "${checkstyleVersion}"
	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
    if (rootProject.hasProperty("checkstyle.ignoreFailures")) {
        ignoreFailures = rootProject.properties["checkstyle.ignoreFailures"].toBoolean()
    }
}

checkstyleMain {
    source = fileTree(dir: "src/main", include: "**/*.java")
}

checkstyleTest {
    source = fileTree(dir: "src/test", include: "**/*.java")
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    archiveClassifier = 'sources'
}

// At a test failure, log the stack trace to the console so that we don't
// have to open the HTML in a browser.
test {
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
    }
    maxHeapSize = '1500m'
}
